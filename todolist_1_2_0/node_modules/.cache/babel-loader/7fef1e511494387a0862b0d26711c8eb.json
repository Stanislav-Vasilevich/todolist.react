{"ast":null,"code":"var _jsxFileName = \"/Users/stanislavasilevich/GitHub/todolist.react/todolist_1_2_0/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { v1 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const todolistId_1 = v1();\n  const todolistId_2 = v1();\n  const [todolists, setTodolists] = useState([{\n    id: todolistId_1,\n    title: 'What to learn',\n    filter: 'all'\n  }, {\n    id: todolistId_2,\n    title: 'What to bye',\n    filter: 'all'\n  }]);\n  const [tasks, setTasks] = useState({\n    [todolistId_1]: [{\n      id: v1(),\n      title: 'HTML&CSS',\n      isDone: true\n    }, {\n      id: v1(),\n      title: 'JS/TS',\n      isDone: false\n    }, {\n      id: v1(),\n      title: 'REDUX',\n      isDone: true\n    }],\n    [todolistId_2]: [{\n      id: v1(),\n      title: 'Beer',\n      isDone: true\n    }, {\n      id: v1(),\n      title: 'Cheeps',\n      isDone: false\n    }, {\n      id: v1(),\n      title: 'Whiskey',\n      isDone: false\n    }, {\n      id: v1(),\n      title: 'Cola',\n      isDone: true\n    }]\n  });\n  const removeTask = (taskId, todolistId) => {\n    setTasks({\n      ...tasks,\n      [todolistId]: tasks[todolistId].filter(t => t.id !== taskId)\n    });\n  };\n  const addTask = (title, todolistId) => {\n    const hello = todolists.find(t => t.id === todolistId);\n    console.log('hello: ', hello);\n    const newTask = {\n      title: title,\n      isDone: false,\n      id: v1()\n    };\n    setTasks({\n      ...tasks,\n      [todolistId]: [...tasks[todolistId], newTask]\n    });\n  };\n  const setTaskNewStatus = (taskId, newStatus, todolistId) => {\n    setTasks({\n      ...tasks,\n      [todolistId]: [...tasks[todolistId].map(t => t.id === taskId ? {\n        ...t,\n        isDone: newStatus\n      } : t)]\n    });\n  };\n  const changeTodolistFilter = (newFilter, todolistId) => {\n    setTodolists(todolists.map(t => t.id === todolistId ? {\n      ...t,\n      filter: newFilter\n    } : t));\n  };\n  const removeTodolist = todolistId => {\n    setTodolists(todolists.filter(t => t.id !== todolistId));\n    delete tasks[todolistId];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: todolists.map(t => {\n      let filterTasks = tasks[t.id];\n      if (t.filter === 'active') {\n        filterTasks = filterTasks.filter(t => !t.isDone);\n      }\n      if (t.filter === 'completed') {\n        filterTasks = filterTasks.filter(t => t.isDone);\n      }\n      return /*#__PURE__*/_jsxDEV(Todolist, {\n        todolistId: t.id,\n        title: t.title,\n        tasks: filterTasks,\n        filter: t.filter,\n        addTask: addTask,\n        removeTask: removeTask,\n        changeTodolistFilter: changeTodolistFilter,\n        setTaskNewStatus: setTaskNewStatus,\n        removeTodolist: removeTodolist\n      }, t.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"wNOqWHBI8fx38xzlsNpn96Zj26A=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Todolist","v1","App","todolistId_1","todolistId_2","todolists","setTodolists","id","title","filter","tasks","setTasks","isDone","removeTask","taskId","todolistId","t","addTask","hello","find","console","log","newTask","setTaskNewStatus","newStatus","map","changeTodolistFilter","newFilter","removeTodolist","filterTasks"],"sources":["/Users/stanislavasilevich/GitHub/todolist.react/todolist_1_2_0/src/App.tsx"],"sourcesContent":["import {useState} from 'react';\nimport './App.css';\nimport {Todolist} from './Todolist';\nimport {v1} from 'uuid';\n\nexport type TaskType = {\n  id: string\n  title: string\n  isDone: boolean\n}\nexport type TodolistType = {\n  id: string\n  title: string\n  filter: FilterValuesType\n}\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TasksStateType = {\n  [todolistId: string]: TaskType[]\n}\n\nexport function App() {\n  const todolistId_1 = v1();\n  const todolistId_2 = v1();\n\n  const [todolists, setTodolists] = useState<Array<TodolistType>>([\n    {\n      id: todolistId_1,\n      title: 'What to learn',\n      filter: 'all',\n    },\n    {\n      id: todolistId_2,\n      title: 'What to bye',\n      filter: 'all',\n    },\n  ]);\n  const [tasks, setTasks] = useState<TasksStateType>({\n    [todolistId_1]: [\n      {id: v1(), title: 'HTML&CSS', isDone: true},\n      {id: v1(), title: 'JS/TS', isDone: false},\n      {id: v1(), title: 'REDUX', isDone: true},\n    ],\n    [todolistId_2]: [\n      {id: v1(), title: 'Beer', isDone: true},\n      {id: v1(), title: 'Cheeps', isDone: false},\n      {id: v1(), title: 'Whiskey', isDone: false},\n      {id: v1(), title: 'Cola', isDone: true},\n    ]\n  });\n\n  const removeTask = (taskId: string, todolistId: string) => {\n    setTasks({...tasks, [todolistId]: tasks[todolistId].filter(t => t.id !== taskId)});\n  }\n  const addTask = (title: string, todolistId: string) => {\n    const hello = todolists.find(t => t.id === todolistId);\n    console.log('hello: ', hello);\n\n    const newTask: TaskType = {\n      title: title,\n      isDone: false,\n      id: v1()\n    }\n\n    setTasks({...tasks, [todolistId]: [...tasks[todolistId], newTask]})\n  }\n  const setTaskNewStatus = (taskId: string, newStatus: boolean, todolistId: string) => {\n    setTasks({\n      ...tasks,\n      [todolistId]: [...tasks[todolistId].map(t => t.id === taskId ? {...t, isDone: newStatus} : t)]\n    });\n  }\n  const changeTodolistFilter = (newFilter: FilterValuesType, todolistId: string) => {\n    setTodolists(todolists.map(t => t.id === todolistId ? {...t, filter: newFilter} : t));\n  }\n  const removeTodolist = (todolistId: string) => {\n    setTodolists(todolists.filter(t => t.id !== todolistId));\n    delete tasks[todolistId];\n  }\n\n  return (\n    <div className=\"App\">\n      {\n        todolists.map(t => {\n          let filterTasks: Array<TaskType> = tasks[t.id];\n          if (t.filter === 'active') {\n            filterTasks = filterTasks.filter(t => !t.isDone);\n          }\n          if (t.filter === 'completed') {\n            filterTasks = filterTasks.filter(t => t.isDone);\n          }\n\n          return (\n            <Todolist\n              key={t.id}\n              todolistId={t.id}\n              title={t.title}\n              tasks={filterTasks}\n              filter={t.filter}\n              addTask={addTask}\n              removeTask={removeTask}\n              changeTodolistFilter={changeTodolistFilter}\n              setTaskNewStatus={setTaskNewStatus}\n              removeTodolist={removeTodolist}\n            />\n          )\n        })\n      }\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}